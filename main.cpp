/**
 * @file    main.cpp
 * @author  Jeffrey Strahm
 * @brief   class: CS5201 - Prof. Price
 * @brief   Homework 6 - Complex Numbers, Outer Products, and Quantum Computing
 * @brief   Due: 4/20/2020
 * @date    4/20/2020
 * 
 * @brief   This is the driver that runs the lander situation using a
 *          combination of filters.
*/

#include <numeric>
#include "matrix.h"
#include "nTrix.h"
#include <chrono>
#include <ctime>

/**
 * @brief       driver to run the models for landing a spaceship on the moon
 * 
 * @exception   The exceptions ofo it's called functions. Currently domain and
 *              length
 * 
 * @returns     0
 */
int main()
{
    std::chrono::_V2::system_clock::rep makeTest;
    std::chrono::_V2::system_clock::rep cloneTest1;
    std::chrono::_V2::system_clock::rep cloneTest2;
    std::chrono::_V2::system_clock::rep accessTest;
    std::chrono::_V2::system_clock::rep arithTest;
    std::chrono::_V2::system_clock::rep multTest;
    std::chrono::_V2::system_clock::rep transTest;
    std::chrono::_V2::system_clock::rep totalTest;
    bool unset = true;

    for (int i = 0; i < 1000000; i++)
    {
        std::chrono::_V2::system_clock::rep temp;
        std::chrono::time_point<std::chrono::system_clock> startTime = std::chrono::system_clock::now();

        std::chrono::time_point<std::chrono::system_clock> trialS = std::chrono::system_clock::now();
        nTrix<double> test({{0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                            {1, 2, 1, 2, 1, 2, 1, 2, 1, 2},
                            {2, 3, 2, 3, 2, 3, 2, 3, 2, 3},
                            {3, 4, 3, 4, 3, 4, 3, 4, 3, 4},
                            {4, 5, 4, 5, 4, 5, 4, 5, 4, 5},
                            {5, 6, 5, 6, 5, 6, 5, 6, 5, 6},
                            {6, 7, 6, 7, 6, 7, 6, 7, 6, 7},
                            {7, 8, 7, 8, 7, 8, 7, 8, 7, 8},
                            {8, 9, 8, 9, 8, 9, 8, 9, 8, 9},
                            {9, 0, 9, 0, 9, 0, 9, 0, 9, 0}});
        std::chrono::time_point<std::chrono::system_clock> trialE = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(trialE - trialS).count();
        if (unset || temp < makeTest)
        {
            makeTest = temp;
        }

        trialS = std::chrono::system_clock::now();
        nTrix<double> clone(test);
        trialE = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(trialE - trialS).count();
        if (unset || temp < cloneTest1)
        {
            cloneTest1 = temp;
        }

        trialS = std::chrono::system_clock::now();
        clone = test;
        trialE = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(trialE - trialS).count();
        if (unset || temp < cloneTest2)
        {
            cloneTest2 = temp;
        }

        trialS = std::chrono::system_clock::now();
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        test(0, 0);
        test(1, 0);
        test(2, 0);
        test(3, 0);
        test(4, 0);
        test(5, 0);
        test(6, 0);
        test(7, 0);
        test(8, 0);
        test(9, 0);
        test(0, 1);
        test(1, 1);
        test(2, 1);
        test(3, 1);
        test(4, 1);
        test(5, 1);
        test(6, 1);
        test(7, 1);
        test(8, 1);
        test(9, 1);
        test(0, 2);
        test(1, 2);
        test(2, 2);
        test(3, 2);
        test(4, 2);
        test(5, 2);
        test(6, 2);
        test(7, 2);
        test(8, 2);
        test(9, 2);
        test(0, 3);
        test(1, 3);
        test(2, 3);
        test(3, 3);
        test(4, 3);
        test(5, 3);
        test(6, 3);
        test(7, 3);
        test(8, 3);
        test(9, 3);
        test(0, 4);
        test(1, 4);
        test(2, 4);
        test(3, 4);
        test(4, 4);
        test(5, 4);
        test(6, 4);
        test(7, 4);
        test(8, 4);
        test(9, 4);
        test(0, 5);
        test(1, 5);
        test(2, 5);
        test(3, 5);
        test(4, 5);
        test(5, 5);
        test(6, 5);
        test(7, 5);
        test(8, 5);
        test(9, 5);
        test(0, 6);
        test(1, 6);
        test(2, 6);
        test(3, 6);
        test(4, 6);
        test(5, 6);
        test(6, 6);
        test(7, 6);
        test(8, 6);
        test(9, 6);
        test(0, 7);
        test(1, 7);
        test(2, 7);
        test(3, 7);
        test(4, 7);
        test(5, 7);
        test(6, 7);
        test(7, 7);
        test(8, 7);
        test(9, 7);
        test(0, 8);
        test(1, 8);
        test(2, 8);
        test(3, 8);
        test(4, 8);
        test(5, 8);
        test(6, 8);
        test(7, 8);
        test(8, 8);
        test(9, 8);
        test(0, 9);
        test(1, 9);
        test(2, 9);
        test(3, 9);
        test(4, 9);
        test(5, 9);
        test(6, 9);
        test(7, 9);
        test(8, 9);
        test(9, 9);
        trialE = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(trialE - trialS).count();
        if (unset || temp < accessTest)
        {
            accessTest = temp;
        }

        trialS = std::chrono::system_clock::now();
        test + clone;
        trialE = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(trialE - trialS).count();
        if (unset || temp < arithTest)
        {
            arithTest = temp;
        }

        trialS = std::chrono::system_clock::now();
        test * clone;
        trialE = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(trialE - trialS).count();
        if (unset || temp < multTest)
        {
            multTest = temp;
        }

        trialS = std::chrono::system_clock::now();
        test.transpose();
        trialE = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(trialE - trialS).count();
        if (unset || temp < transTest)
        {
            transTest = temp;
        }

        std::chrono::time_point<std::chrono::system_clock> endTime = std::chrono::system_clock::now();
        temp = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
        if (unset || temp < totalTest)
        {
            totalTest = temp;
        }
    }

    std::cout << "make time: " << makeTest << " ns" << std::endl;
    std::cout << "clone1 time: " << cloneTest1 << " ns" << std::endl;
    std::cout << "clone2 time: " << cloneTest2 << " ns" << std::endl;
    std::cout << "access time: " << accessTest << " ns" << std::endl;
    std::cout << "arith time: " << arithTest << " ns" << std::endl;
    std::cout << "mult time: " << multTest << " ns" << std::endl;
    std::cout << "transpose time: " << transTest << " ns" << std::endl;
    std::cout << "total time: " << totalTest << " ns" << std::endl;

    return 0;
}